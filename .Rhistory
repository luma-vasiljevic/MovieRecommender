## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = FALSE)
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
## Draw the x-axis labels.
text(x = 1:length(dat),
## Move labels to just below bottom of chart.
y = par("usr")[3] - 0.45,
## Use names from the data list.
labels = names(dat),
## Change the clipping region.
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
## Adjust the labels to almost 100% right-justified.
adj = 0.965,
## Increase label size.
cex = 1.2)
## Make some test data.
dat <- list("LR Train"   = ERRORS$LR_Training_Error,
"LR Test"   = ERRORS$LR_Test_Error,
"QR Train"  = ERRORS$QR_Training_Error,
"QR Test" = ERRORS$QR_Test_Error,
"KNN Train"   = ERRORS$KNN_Training_Error,
"KNN Test"   = ERRORS$KNN_Test_Error,
"Bayes Train"  = ERRORS$Bayes_Training_Error,
"Bayes Test" = ERRORS$Bayes_Test_Error)
## Adjust some graphical parameters.
par(mar = c(6.1, 4.1, 4.1, 4.1), # change the margins
lwd = 2, # increase the line thickness
cex.axis = 1.2 # increase default axis label size
)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = FALSE)
## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = TRUE)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = TRUE, las=0)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = TRUE, las=2)
## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
## Adjust some graphical parameters.
par(mar = c(6.1, 4.1, 4.1, 4.1), # change the margins
lwd = 2, # increase the line thickness
cex.axis = 1.2 # increase default axis label size
)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = names(dat), las=2)
## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
dat <- list("LR Train"   = ERRORS$LR_Training_Error,
"LR Test"   = ERRORS$LR_Test_Error,
"QR Train"  = ERRORS$QR_Training_Error,
"QR Test" = ERRORS$QR_Test_Error,
"KNN Train"   = ERRORS$KNN_Training_Error,
"KNN Test"   = ERRORS$KNN_Test_Error,
"Bayes Train"  = ERRORS$Bayes_Training_Error,
"Bayes Test" = ERRORS$Bayes_Test_Error)
## Adjust some graphical parameters.
par(mar = c(6.1, 4.1, 4.1, 4.1), # change the margins
lwd = 2, # increase the line thickness
cex.axis = 1.2 # increase default axis label size
)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = names(dat), las=2)
dat <- list("LR Train"   = ERRORS$LR_Training_Error,
"LR Test"   = ERRORS$LR_Test_Error,
"QR Train"  = ERRORS$QR_Training_Error,
"QR Test" = ERRORS$QR_Test_Error,
"KNN Train"   = ERRORS$KNN_Training_Error,
"KNN Test"   = ERRORS$KNN_Test_Error,
"Bayes Train"  = ERRORS$Bayes_Training_Error,
"Bayes Test" = ERRORS$Bayes_Test_Error)
## Adjust some graphical parameters.
par(mar = c(6.1, 4.1, 4.1, 4.1), # change the margins
lwd = 2, # increase the line thickness
cex.axis = 1.2 # increase default axis label size
)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = names(dat), las=2)
## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
# store data into list
dat <- list("LR Train"   = ERRORS$LR_Training_Error,
"LR Test"   = ERRORS$LR_Test_Error,
"QR Train"  = ERRORS$QR_Training_Error,
"QR Test" = ERRORS$QR_Test_Error,
"KNN Train"   = ERRORS$KNN_Training_Error,
"KNN Test"   = ERRORS$KNN_Test_Error,
"Bayes Train"  = ERRORS$Bayes_Training_Error,
"Bayes Test" = ERRORS$Bayes_Test_Error)
## Draw boxplot with no axes.
boxplot(dat, xaxt = "n", yaxt = "n")
## Draw x-axis without labels.
axis(side = 1, 1:8, labels = names(dat), las=2)
## Draw y-axis.
axis(side = 2,
## Rotate labels perpendicular to y-axis.
las = 2,
## Adjust y-axis label positions.
mgp = c(3, 0.75, 0))
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/C1/C1.R')
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/C1/C1.R')
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/C1/C1.R')
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/C1/C1.R')
logit(-6+.5*3+3.5)
install.packages("sigmoid")
library(sigmoid)
logit(-6+.5*3+3.5)
-6+.5*3+3.5
sigmoid(-6+.5*3+3.5)
logit(0.5)
sigmoid(0)
install.packages("ISLR")
caravan=load('caravan')
caravan=load('Caravan')
library(ISLR)
caravan=load('Caravan')
caravan=Caravan
View(caravan)
fit1=glm(Purchase~., data=caravan, family=binomial)
test=caravan[1:1000,]
train=caravan[1001:5822,]
fit1=glm(Purchase~., data=train, family=binomial)
summary(fit1)
caravan$P_bin=(caravan$Purchase=='YES')
test=caravan[1:1000,-c('Purchase')]
test=caravan[1:1000,-'Purchase']
test=caravan[1:1000,-c('Purchase')]
test=caravan[1:1000,!(names(DF) == "Purchase")]
test=caravan[1:1000,!(names(caravan) == "Purchase")]
train=caravan[1001:5822,!(names(caravan) == "Purchase")]
prob_pred=predict(classifier,type = 'response',newdata = hr_test[-2])
fit1=glm(Purchase~., data=train, family=binomial)
fit1=glm(P_bin~., data=train, family=binomial)
prob_pred=predict(fit1,type = 'response',newdata = test)
View(caravan)
train[,"P_bin"]
caravan$P_bin=int((caravan$Purchase=='YES'))
caravan$P_bin=as.integer((caravan$Purchase=='YES'))
test=caravan[1:1000,!(names(caravan) == "Purchase")]
train=caravan[1001:5822,!(names(caravan) == "Purchase")]
fit1=glm(P_bin~., data=train, family=binomial)
prob_pred=predict(fit1,type = 'response',newdata = test)
train[,"P_bin"]
y_pred
prob_pred
summary(fit1)
prob_pred_train=predict(fit1,type = 'response',newdata = train)
x=cbind(prob_pred_train,train[,"P_bin"])
View(x)
View(train)
caravan$Purchase
caravan$P_bin=as.integer((caravan$Purchase=='Yes'))
test=caravan[1:1000,!(names(caravan) == "Purchase")]
train=caravan[1001:5822,!(names(caravan) == "Purchase")]
fit1=glm(P_bin~., data=train, family=binomial)
prob_pred_train=predict(fit1,type = 'response',newdata = train)
x=cbind(prob_pred_train,train[,"P_bin"])
View(x)
prob_pred=predict(fit1,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
tes_Y=test[,test$P_bin==1]
test$P_bin==1
test[,test$P_bin==1]
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(test_N[,"pred_y"])
sum(tes_N[,"pred_y"])
test$pred=y_pred
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N[,"pred_y"])
tes_N[,"pred_y"]
sum(tes_N$pred)
sum(tes_Y$pred)
install.packages("pROC")
library(pROC)
library(ISLR)
par(pty="s")
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/Q8/Q8.R')
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/Q8/Q8.R')
fit2 = step(fit1)
fit2 = step(fit1, scope=list(upper=~., lower=~1))
prob_pred=predict(fit2,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
sum(tes_N$pred)
View(fit2)
prob_pred=predict(fit2,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
sum(tes_N$pred)
sum(tes_Y$pred)
par(pty="s")
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
fit3 = step(fit1, scope=list(upper=~., lower=~1), trace = 0, k=log(n))
fit3 = step(fit1, scope=list(upper=~., lower=~1), trace = 0, k=log(4822))
prob_pred=predict(fit3,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
sum(tes_N$pred)
59-sum(tes_Y$pred)
par(pty="s")
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
sum(tes_N$pred)
59-sum(tes_Y$pred)
View(fit3)
library(glmnet)
X=data.matrix(train[,!(names(caravan) == "P_bin")])
Y=train[,"P_bin"]
X=data.matrix(train[,!(names(caravan) == "P_bin")])
Y=train[,"P_bin"]
fit4=glmnet(X,Y,family="binomial",alpha=1, lambda = 0.004)
View(fit4)
coeff=predict(fit4, lambda=0.004, type="coefficients")
View(coeff)
coeff
coeff=predict(fit4, type="coefficients")
coeff
View(fit4)
fit4=glmnet(X,Y,alpha=1, lambda = 0.004)
coeff=predict(fit4, type="coefficients")
coeff
View(X)
X=data.matrix(train[,!(names(train) == "P_bin")])
View(X)
X=data.matrix(train[,!(names(train) == "P_bin")])
Y=train[,"P_bin"]
fit4=glmnet(X,Y,alpha=1, lambda = 0.004)
coeff=predict(fit4, type="coefficients")
View(coeff)
coeff
fit4$beta
sum(fit4$beta != 0)
prob_pred=predict(fit4,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
sum(tes_N$pred)
59-sum(tes_Y$pred)
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
y_pred
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
lrROC <- roc(test$P_bin ~ y_pred,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
library(sigmoid)
library(pROC)
library(ISLR)
library(glmnet)
sigmoid(-6+.5*3+3.5)
library(ISLR)
caravan=Caravan
caravan$P_bin=as.integer((caravan$Purchase=='Yes'))
test=caravan[1:1000,!(names(caravan) == "Purchase")]
train=caravan[1001:5822,!(names(caravan) == "Purchase")]
fit1=glm(P_bin~., data=train, family=binomial)
prob_pred_train=predict(fit1,type = 'response',newdata = train)
prob_pred=predict(fit1,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred)
59-sum(tes_Y$pred)
auc(test$Purchase, prob_pred)
auc(test$P_bin, prob_pred)
fit20 = glm(P_bin~ 1, data=train, family=binomial)
fit2 = stepAIC(fit20, direction = "forward", scope=list(upper=fit1,lower=fit20), trace=0)
fit2 = step(fit20, direction = "forward", scope=list(upper=fit1,lower=fit20), trace=0)
prob_pred=predict(fit2,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
sum(tes_N$pred)
59-sum(tes_Y$pred)
View(fit2)
y_pred = ifelse(prob_pred>0.25,1,0)
prob_pred=predict(fit1,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
View(test)
sum(tes_N$pred)
59-sum(tes_Y$pred)
prob_pred1=predict(fit2,type = 'response',newdata = test)
prob_pred1=predict(fit2,type = 'response',newdata = test)
y_pred1 = ifelse(prob_pred1>0.25,1,0)
test$pred1=y_pred1
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred)
59-sum(tes_Y$pred)
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred1)
59-sum(tes_Y$pred1)
auc(test$P_bin, prob_pred1)
fit3 = step(fit1, scope=list(upper=fit1, lower=fit20), trace = 0, k=log(4822))
fit3 = step(fit1, scope=list(upper=~., lower=~1), trace = 0, k=log(4822))
prob_pred3=predict(fit3,type = 'response',newdata = test)
y_pred3 = ifelse(prob_pred3>0.25,1,0)
test$pred3=y_pred3
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred3)
59-sum(tes_Y$pred3)
auc(test$P_bin, prob_pred3)
lrROC <- roc(test$P_bin ~ y_pred3,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
par(pty="s")
lrROC <- roc(test$P_bin ~ y_pred3,plot=TRUE,print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
par(pty="s")
par(pty="s")
lrROC <- roc(test$P_bin ~ prob_pred3,plot=TRUE,
print.auc=TRUE,col="green",lwd =4,legacy.axes=TRUE,main="ROC Curves")
View(fit2)
X=data.matrix(train[,!(names(train) == "P_bin")])
Y=train[,"P_bin"]
fit4=glmnet(X,Y,alpha=1, lambda = 0.004,family = 'binomial')
sum(fit4$beta != 0)
fit4$beta
View(fit4)
View(X)
prob_pred4=predict(fit4,type = 'response',newdata = test)
y_pred4 = ifelse(prob_pred4>0.25,1,0)
test$pred4=y_pred4
sum(tes_N$pred4)
59-sum(tes_Y$pred4)
auc(test$P_bin, prob_pred4)
prob_pred4=predict(fit4,type = 'response',newdata = test)
y_pred4 = ifelse(prob_pred4>0.25,1,0)
test$pred4=y_pred4
sum(tes_N$pred4)
59-sum(tes_Y$pred4)
auc(test$P_bin, prob_pred4)
prob_pred4=predict(fit4,type = 'response',newdata = test)
prob_pred4=predict(fit4,type = 'response',newx = data.matrix(test[,!(names(test) == "P_bin")]))
y_pred4 = ifelse(prob_pred4>0.25,1,0)
test$pred4=y_pred4
sum(tes_N$pred4)
59-sum(tes_Y$pred4)
auc(test$P_bin, prob_pred4)
prob_pred4=predict(fit4,type = 'response',newx = data.matrix(test[,!(names(test) == "P_bin")]))
test_X=test=caravan[1:1000,!(names(caravan) == "Purchase")]
View(test_X)
prob_pred4=predict(fit4,type = 'response',newx = data.matrix(test_X[,!(names(test) == "P_bin")]))
y_pred4 = ifelse(prob_pred4>0.25,1,0)
test$pred4=y_pred4
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred4)
59-sum(tes_Y$pred4)
auc(test$P_bin, prob_pred4)
fit1=glm(P_bin~., data=train, family=binomial)
prob_pred_train=predict(fit1,type = 'response',newdata = train)
prob_pred=predict(fit1,type = 'response',newdata = test)
y_pred = ifelse(prob_pred>0.25,1,0)
test$pred=y_pred
tes_Y=test[test$P_bin==1,]
tes_N=test[test$P_bin==0,]
sum(tes_N$pred)
59-sum(tes_Y$pred)
auc(test$P_bin, prob_pred)
install.packages('e1071')
library(e1071)
load('spam')
head(spam)
data(spam)
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/Q9/Q9.R')
table(spam.test$Y, svmpred)
summary(svmfit)
svmpred_tr=predict(svmfit, newdata=spam.train)
table(spam.train$Y, svmpred_tr)
tb_tr=table(spam.train$Y, svmpred_tr)
sum(diag(tb_tr))
1-sum(diag(tb_tr))/sum(tb_tr)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=10)
summary(svmfit)
table(spam.train$Y, svmfit$fitted)
svmpred_tr=predict(svmfit, newdata=spam.train)
tb_tr=table(spam.train$Y, svmpred_tr)
sum(tb_tr)-sum(diag(tb_tr))
summary(svmfit)
svmpred_tr=predict(svmfit, newdata=spam.train)
tb_tr=table(spam.train$Y, svmpred_tr)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=50)
summary(svmfit)
svmpred_tr=predict(svmfit, newdata=spam.train)
tb_tr=table(spam.train$Y, svmpred_tr)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., data=spam.train, cost=1)
summary(svmfit)
tb_tr=table(spam.train$Y, svmfit$fitted)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., data=spam.train, cost=10)
summary(svmfit)
tb_tr=table(spam.train$Y, svmfit$fitted)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., data=spam.train, cost=50)
summary(svmfit)
tb_tr=table(spam.train$Y, svmfit$fitted)
sum(tb_tr)-sum(diag(tb_tr))
svmpred=predict(svmfit, newdata=spam.test)
tb=table(spam.test$Y, svmpred)
sum(tb)-sum(diag(tb))
svmfit=svm(Y ~., kernel="linear", data=spam.train, cost=1)
summary(svmfit)
tb_tr=table(spam.train$Y, svmfit$fitted)
sum(tb_tr)-sum(diag(tb_tr))
source('C:/Users/Luma/iCloudDrive/Illinois/Practical Statistical Learning/Q9/Q9.R')
setwd("~/")
shiny::runApp('GitHub/BookRecommender')
install.packages('shiny')
install.packages("shiny")
install.packages('shinydashboard')
install.packages('recommenderlab')
install.packages('data.table')
install.packages('ShinyRatingInput')
install.packages('shinyjs')
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
library(devtools)
library(shiny)
install.packages("shiny")
install.packages("shiny")
.libPaths()
install.packages("shiny")
install.packages('htmltools')
install.packages("shiny")
install.packages(c("arules", "askpass", "backports", "BH", "bit", "bit64", "bitops", "brio", "broom", "cachem", "caTools", "cli", "clipr", "colorspace", "config", "conquer", "cpp11", "credentials", "crosstalk", "curl", "data.table", "DBI", "diffobj", "digest", "dplyr", "e1071", "evaluate", "fansi", "float", "fs", "generics", "gert", "glmnet", "glue", "haven", "highr", "htmltools", "htmlwidgets", "httpuv", "isoband", "later", "lattice", "lifecycle", "lme4", "lubridate", "maptools", "markdown", "Matrix", "matrixStats", "mclust", "memoise", "mgcv", "mime", "mongolite", "mvtnorm", "nlme", "nloptr", "odbc", "openssl", "openxlsx", "packrat", "pillar", "pkgbuild", "pkgconfig", "pkgload", "PKI", "prettyunits", "pROC", "profvis", "proxy", "quantreg", "r2d3", "R6", "rappdirs", "Rcpp", "RcppArmadillo", "RCurl", "readr", "recosystem", "remotes", "rgl", "RhpcBLASctl", "rJava", "RJDBC", "RJSONIO", "rlang", "rmarkdown", "roxygen2", "rprojroot", "rsconnect", "rsparse", "slam", "sp", "sparklyr", "stringi", "survival", "sys", "testthat", "tibble", "tidyr", "tinytex", "tzdb", "utf8", "uuid", "vroom", "withr", "xfun", "xml2", "yaml", "zip"))
install.packages("shiny")
install.packages("htmltools")
install.packages('RTools')
version
library(installr)
install.packages('installr')
library(installr)
updateR()
library(installr)
updateR()
.libPaths()
version
R.home()
install.packages("shiny")
library(shiny)
install.packages("devtools")
devtools::install_github("stefanwilhelm/ShinyRatingInput")
setwd("~/")
getwd()
setwd("~/")
setwd("~/GitHub/MovieRecommender")
getwd()
